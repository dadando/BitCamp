##Insert예제
/*
 * create or replace procedure call_insert(
    hakbun member.hakbun%type,
    name member.name%type,
    addr member.addr%type,
    phone member.phone%type)
is
begin
    insert into member values(hakbun,name,addr,phone);
end;
/
*/

package CollableStatement_Ex;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;

public class InsertExam_CALL {

	public static void main(String[] args) {
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@127.0.0.1:1521:orcl";
		Connection con = null;
		CallableStatement cstmt = null;
		String hakbun,name,addr,phone;
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Member 테이블에 값 추가하기...");
			System.out.print("학번 입력: ");
			hakbun = br.readLine();
			System.out.print("이름 입력: ");
			name = br.readLine();
			System.out.print("주소 입력: ");
			addr = br.readLine();
			System.out.print("전화번호 입력: ");
			phone = br.readLine();
			
			Class.forName(driver);
			con = DriverManager.getConnection(url,"scott","123456");
			
			cstmt=con.prepareCall("{call call_insert(?,?,?,?)}");
			cstmt.setString(1,hakbun);
			cstmt.setString(2,name);
			cstmt.setString(3,addr);
			cstmt.setString(4,phone);
			cstmt.executeUpdate();
			//int res = cstmt.executeUpdate();
			//System.out.println(res);
			System.out.println("데이터 베이스 연결 성공!");
		}
		catch(Exception e) {
			System.out.println("오류 발생! : "+e.getMessage());
		}
		finally {
			try {
				if(con!=null) con.close();
			}
			catch(Exception ignored) {
			}
			try {
				if(cstmt!=null) cstmt.close();
			}
			catch(Exception ignored){
			}
		}
	}
}

##Update 예제
/*
create or replace procedure call_update(
    p_hakbun member.hakbun%type,
    p_addr member.addr%type,
    p_phone member.phone%type)
is
begin
    update member set addr=p_addr,phone=p_phone
    where hakbun=p_hakbun;
end;
/
*/

package CollableStatement_Ex;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;

public class UpdateExam_CALL {

	public static void main(String[] args) {
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@127.0.0.1:1521:orcl";
		Connection con = null;
		CallableStatement cstmt = null;
		String hakbun,phone,addr;
		
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Member테이블 수정하기..");
			System.out.print("학번 입력: ");
			hakbun = br.readLine();
			System.out.print("주소 입력: ");
			addr = br.readLine();
			System.out.print("전화번호 입력: ");
			phone = br.readLine();
			
			Class.forName(driver);
			con = DriverManager.getConnection(url,"scott","123456");
			
			cstmt=con.prepareCall("{call call_update(?,?,?)}");
			cstmt.setString(1, hakbun);
			cstmt.setString(2, addr);
			cstmt.setString(3, phone);
			cstmt.executeUpdate();
			
			System.out.println("데이터 베이스 연결 성공");
			
		}
		catch(Exception e){
			System.out.println("오류 발생! : "+e.getMessage());
		}
		finally {
			try {
				if(con!=null) con.close();
			}
			catch(Exception ignored) {
			}
			try {
				if(cstmt!=null) cstmt.close();
			}
			catch(Exception ignored) {
			}
		}

	}

}

#Delete예제
/*
 create or replace procedure call_delete(
    p_hakbun member.hakbun%type)
is
begin
    delete from member
    where hakbun=p_hakbun;
end;
/
*/

package CollableStatement_Ex;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;

public class DeleteExam_CALL {

	public static void main(String[] args) {
		
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@127.0.0.1:1521:orcl";
		Connection con = null;
		CallableStatement cstmt = null;
		
		String hakbun;
		
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Member테이블 값 삭제하기..");
			System.out.print("학번 입력: ");
			hakbun = br.readLine();
			
			Class.forName(driver);
			con = DriverManager.getConnection(url,"scott","123456");
			cstmt=con.prepareCall("{call call_delete(?)}");
			cstmt.setString(1, hakbun);
			cstmt.execute();
			
			System.out.println("데이터 베이스 연결 성공!!");
		}
		catch(Exception e) {
			System.out.println("오류 발생! : "+e.getMessage());
		}
		finally {
			try {
				if(con!= null) con.close();
				if(cstmt!=null) cstmt.close();
			}
			catch(Exception e) {
				System.out.println(e.getMessage());
			}
		}
	}
}

#싱글톤 : 객체를 메소드마다 만들어서 사용할 필요없이 하나의 객체로 만들어서 사용하는 기법
ex) 메인 메소드 밖에 static Connection con = connectDB(); 를 만들어서 여러 메소드에 사용

