(5장 마지막 부분)

7. 선택을 위한 DECODE 함수

형식: DECODE(표현식,조건1,결과1,조건2,결과2,...)
ex) select ename,deptno,decode(deptno,10,'ACCOUNTING',20,'RESEARCH',30,'SALES',40,'OPERATIONS')
as dname from emp;
=> 40을 지우면 디폴트 값을 OPERATIONS로 만들 수 있다.
ex) select ename,deptno,decode(deptno,10,'MBC',20,'KBS','SBS') as dname from emp;
=> deptno가 10일때 MBC, 20일때 KBS, 나머지는 SBS가 된다.
ex) select ename,job,decode(job, 'CLERK', '점원', 'SALESMAN', '영업사원', 'MANAGER', '관리자', 'ANALYST','분석가','PRESIDENT','대표') as job from emp;
ex) 급여상승
select empno, ename, job, sal, decode (job, 'ANALYST', sal*1.05, 'SALESMAN', sal*1.1, 'MANAGER', sal*1.15, 'CLERK', sal*1.2,sal) as UPSAL from emp;


8. 조건에 따라 서로 다른 처리가 가능한 CASE 함수

형식: CASE 표현식 WHEN 조건1 THEN 결과1 WHEN 조건2 THEN 결과2 ELSE 결과n END
ex) select ename,deptno,
case when deptno = 10 then 'ACCOUNTING' when deptno =20 then 'REASEARCH' when deptno =30 then 'SALES' when DEPTNO =40 then 'OPERATIONS' end as dname from emp;
(=)
select ename,deptno,case deptno when 10 then 'ACCOUNTING' when 20 then 'REASEARCH'
when 30 then 'SALES' when 40 then 'OPERATIONS' end as dname from emp;
=> case와 첫 when 사이에 표현식을 써서 when 다음에 조건 값만 써서 간편하게 가능. else는 나머지의 경우
ex) select ename,deptno,case deptno when 10 then 'MBC' when 20 then 'KBS' else 'SBS' end 
as dname from emp;



6장 그룹함수
 - SUM, AVG, MAX, MIN, COUNT, STDDEV (그룹의 표준편차), VARIANCE (그룹의 분산) 
2. GROUP BY 절
 : 어떤 칼럼 값을 기준으로 그룹함수를 적용할 경우
 : GROUP BY 절 다음에는 별칭을 쓸 수 없다. 반드시 칼럼명을 기술해야 한다.
형식: select 칼럼명, 그룹함수 from 테이블명 where 조건 (연산자) group by 칼럼명;
ex) select deptno from emp group by deptno;
=> deptno를 그룹화
ex) select deptno, avg(sal) from emp group by deptno;
=> 그룹기준 급여 평균
ex) select deptno, max(sal),min(sal) from emp group by deptno;
=> 그룹기준 급여최대,최소
ex) select deptno,count(*),count(comm) from emp group by deptno;
=> 그룹에 속한 사원수, 커미션을 받는 사원수

3. HAVING 조건
 : 반드시 GROUP BY와 함께 사용해야 한다.
 : 그룹의 결과를 제한할 때는 WHERE 절 대신 HAVING 절을 사용해야 한다.

ex) select deptno,round(avg(sal),2) from emp group by deptno having avg(sal)>=2000;
=> 그룹 급여평균이 2000이상만 출력되도록 조건설정.
ex) select deptno,max(sal),min(sal) from emp group by deptno having max(sal)>=2900;
=> 최대 급여가 2900 이상인 그룹의 최대값과 최소값 출력.



7장 조인
 : 원하는 정보가 두개 이상의 테이블에 나누어져 있을때 
   결합하여 한번의 질의로 원하는 값을 얻을 수 있다.

2. Cross Join
 컬럼 수는 두테이블 컬럼수의 합
 로우 수는 두테이블의 로우수의 곱

ex) select * from emp,dept;
=> 테이블들을 콤마로 연결하여 연속하여 기술. (단순 결합)
ex) select EMP.ename, EMP.deptno, DEPT.deptno, DEPT.dname from EMP,DEPT;
=> 결합한 테이블에 원하는 컬럼만 출력. (이때, 테이블이름을 한정자 or 규정자 라고 칭함)
=> 컬럼들이 어느 테이블의 소속인지 나타낼수 있다.
=> 컬럼이름이 중복된경우 한정자를 꼭 써주어 명확히 구분해야 한다.
=> 중복되지 않은 경우에는 안써도 상관없다.

# 테이블 이름에 별칭 부여
ex) select E.ename, E.deptno, D.deptno, D.dname from EMP E,DEPT D;
=> 테이블 이름에 별칭을 부여해서 테이블이름이 길때 간편하게 사용할 수 있다.

#Equi Join : 동일 컬럼을 기준으로 조인. (가장 많이 쓰임)
ex) select * from EMP,DEPT where EMP.deptno = dept.deptno;
=> 조건에 만족하는 결과만 생성.
ex) select ename,dname from emp,dept where emp.deptno=dept.deptno and ename = 'SCOTT';
=> 'SCOTT'의 부서명
ex) select E.ename,E.sal from emp E,dept D where D.deptno = E.deptno and loc = 'NEW YORK';
=> 뉴욕에서 근무하는 사원의 이름과 급여
ex) select ename,hiredate from emp E,dept D where E.deptno = D.deptno and dname = 'ACCOUNTING';
=> 'ACCOUNTING' 부서 소속 사원의 이름과 입사일

#Non-Equi Join : 동일 컬럼이 없이 다른 조건을 사용하여 조인
ex) select ename,sal,grade from emp,salgrade where sal between losal and hisal;
=> 같은 칼럼이 없지만 비교연산자를 통해 급여에 등급을 줄 수 있다.
=> 칼럼의 이름이 동일한게 없어서 한정자를 안 써도 된다.

#Outer Join : 조인 조건에 만족하지 않는 행도 나타낸다. ( (+)는 없는쪽에 붙인다. )
 : 조인 조건에 만족하지 못하였더라도 해당 로우를 나타내고 싶을 때 사용하는 조인.
  이때, "(+)" 기호를 조인 조건에서 정보가 부족한 칼럼 이름 뒤에 덧붙인다.
ex) select employee.ename || ' 의 매니저는 ' || manager.ename || '입니다.'
    from emp employee, emp manager where employee.mgr = manager.empno(+);
=> 각 사원과 각 사원의 매니저이름을 출력하고 KING은 매니저가 없지만 (조건만족x) 같이 출력된다.
ex) select E.ename, D.deptno, D.dname from emp E,dept D where E.deptno(+) = D.deptno order by deptno;
=> emp에 없는 부서번호 40 도 같이 출력.

#Seif join : 한 테이블 내에서 조인
 : 하나의 테이블에 별칭을 다르게 주어 2개의 테이블인 것처럼 나타내어 조인.
ex) select A.ename,B.ename,A.mgr,B.empno from emp A,emp B where A.mgr = B.empno;
=> 각사원의 상관들의 이름을 출력
ex) select A.ename,B.ename from emp A,emp B where A.mgr = B.empno and A.ename = 'SMITH';
=> 'SMITH' 의 상관 이름 출력
ex) select A.ename,A.job from emp A,emp B where A.mgr = B.empno and B.ename='KING';
=> 매니저가 KING인 사원들의 이름과 직급을 출력

#ANSI Join
 : ANSI Join 은 국제기관에서 정한 표준이므로 같이 외우는게 좋다.
ex) select * from emp cross join dept; 
=> cross join 을 명시해주는 것이 ANSI Join.
=> 명시 안해주면 오라클에서 제공하는 기본 Join.
ex) select * from emp cross join dept;

#ANSI Inner Join
=> 오라클의 Equi Join 과 동일
ex) select ename,dname from emp inner join dept on emp.deptno = dept.deptno where ename = 'SCOTT';
=> 중복된 항목 둘다 나옴
ex) select emp.ename,dept.dname from emp inner join dept using (deptno);
=> 중복된 항목은 나오지 않음
ex) select emp.ename,dept.dname from emp natural join dept;
=> 중복된 항목은 나오지 않음

#테이블 만들기
DROP TABLE DEPT01; --TABLE 삭제
CREATE TABLE DEPT01( DEPTNO NUMBER(2) , DNAME VARCHAR2(14)); -- 테이블 설정
INSERT INTO DEPT01 VALUES(10, 'ACCOUNTING'); -- 행삽입
INSERT INTO DEPT01 VALUES(20, 'RESEARCH'); -- 행삽입

select * from dept01;

DROP TABLE DEPT02;
CREATE TABLE DEPT02( DEPTNO NUMBER(2), DNAME VARCHAR2(14));
INSERT INTO DEPT02 VALUES(10, 'ACCOUNTING');
INSERT INTO DEPT02 VALUES(30, 'SALES');
SELECT * FROM DEPT02;

select * from dept02;


#ANSI Outer Join (LEFT/RIGHT OUTER JOIN) 
ex) select * from dept01 left outer join dept02 on dept01.deptno = dept02.deptno;
=> 왼쪽 테이블에 항목은 전부 출력
ex) select * from dept01 right outer join dept02 on dept01.deptno = dept02.deptno;
=> 오른쪽 테이블에 항목은 전부 출력
ex) select * from dept01 full outer join dept02 on dept01.deptno = dept02.deptno;
=> 양쪽 테이블 항목 전부 출력



8장 서브쿼리
 : 서브쿼리는 비교 연산자의 오른쪽에 기술해야 하고 반드시 괄호로 둘러쌓아야 한다.
 : 서브쿼리는 메인쿼리가 실행되기 이전에 한번만 실행이 된다.
 : 조건식에 등호(=) 가 오는 경우에는 단일행 서브쿼리문만 가능하다.

ex) select dname from dept where deptno = (select deptno from emp where ename = 'SCOTT');
=> 'SCOTT'의 부서 번호를 구하고 그에 맞는 부서명을 출력.

#단일 행 서브쿼리
 : 서브쿼리를 실행했을 때 한개 행이 나올때
ex) select ename,deptno from emp where deptno = (select deptno from emp where ename = 'SCOTT')
and ename <> 'SCOTT';
=> SCOTT과 같은 부서에서 근무하는 사원의 이름과 부서번호를 출력
( JOIN 방식 )
select A.ename,A.deptno from emp A,emp B where A.deptno = B.deptno and B.ename = 'SCOTT' and A.ename <> 'SCOTT';
=> Seif Join 방식을 사용.
ex) select * from emp where job = (select job from emp where ename ='SCOTT');
=> SCOTT과 동일한 직급을 가진 사원을 출력
( JOIN 방식 )
ex) select B.* from emp A, emp B where B.job = A.job and A.ename = 'SCOTT';
ex) select ename,sal from emp 
     where sal >= (select sal from emp where ename = 'SCOTT') and ename <> 'SCOTT';
=> SCOTT의 급여와 동일하거나 더 많이 받는 사원의 이름과 급여
ex) select ename,deptno from emp where deptno = (select deptno from dept where loc = 'DALLAS');
=> DALLAS에서 근무하는 사원의 이름과 부서번호
#서브쿼리에서 그룹함수의 사용
ex) select ename, sal from emp where sal > (select avg(sal) from emp);

#다중 행 서브쿼리
 : 서브쿼리를 실행했을 때 여러행이 나올때
 : 다중행 서브쿼리는 반드시 다중 행 연산자와 함께 사용해야 합니다.
 *다중 행 연산자*
 IN : 서브쿼리의 결과 중에서 하나라도 일치하면 참
 ALL : 결과와 모든값이 일치하면 참.
 ANY,SOME : 하나이상 일치하면 참
 EXIST : 만족하는 값이 하나라도 존재하면 참.

#IN 연산자
ex) select ename,sal,deptno from emp where deptno in(select distinct deptno from emp where sal>=3000);
=> 급여가 3000이상인 사원들의 부서번호와 같은 부서번호인 사원 정보.
ex) select empno,ename,sal,deptno from emp where sal in(select max(sal) from emp group by deptno);
=> 부서별로 가장 급여를 많이 받는 사원의 정보
ex) select deptno,dname,loc from dept where deptno in(select deptno from emp where job ='MANAGER');
=> 직급이 MANAGER인 사람의 속한 부서의 부서번호와 부서명,지역을 출력

#ALL 연산자
 : 모든 값이 전부 일치해야 참이다. 즉, 최대값만 비교해주면 된다.
ex) select ename,sal from emp where sal > all(select sal from emp where deptno =30);
=> 부서번호가 30인 사원들의 급여보다 많은 급여를 받는 사원정보.
ex) select ename,sal,job from emp 
    where sal >= all(select sal from emp where job = 'SALESMAN')and job <> 'SALESMAN';
=> 영업 사원들보다 급여를 많이 받는 사원들의 이름과 급여와 직급.

#ANY 연산자
 : 하나 이상 일치하면 참. 즉, 최소값만 비교해주면 된다.
ex) select ename, sal from emp where sal > any ( select sal from emp where deptno = 30);
=> 부서번호가 30인 사원들중 아무 한명의 급여(최소급여)보다 많은 급여를 받는 사원
ex) select ename,sal,job from emp 
     where sal > any(select sal from emp where job = 'SALESMAN') and job <> 'SALESMAN'
=> 영업 사원들의 최소 급여보다 많이 받는 사원들의 이름과 급여와 직급을 출력(영업사원x)


--Join,Subquery 예제
--1. 급여가 1000 이상인 사원들의 부서별 평균 급여를 출력해보세요 
--단, 부서별 평균 급여가 2000 이상인 부서만 출력하시오.
select round(avg(sal),2) as 평균급여,deptno from emp where sal >= 1000 group by deptno having avg(sal)>=2000;
--2. 각 부서별 같은 업무(job)를 하는 사람의 인원수를 구해서 
-- 부서번호, 업무(job), 인원수를 부서번호에 대해서 오름차순 정렬해서 출력하시오.
select deptno,job,count(job) from emp group by deptno,job order by deptno,count(job);
--3. 부서별로, 업무별로 그룹을 지어서 부서번호, 업무, 인원수, 급여의 평균, 합계 구하시오.
select deptno,job,count(*),round(avg(sal),2),sum(sal) from emp group by deptno, job order by deptno;
--4. 부서별로 사원의 수가 4명 이상인 사원의 부서번호, 급여의 합계를 구하시오.
select deptno, sum(sal) from emp group by deptno having count(*) >= 4;
--5. emp테이블에서 직급이 SALESMAN이 아닌 사원에 대한 부서별로 급여의 합이
--   4000 이상인 부서의 정보를 출력하시오.(부서번호, 급여의 합계순으로 출력)
select deptno,sum(sal) from emp where job <> 'SALESMAN' group by deptno having sum(sal)>=4000 ;
--6. emp테이블에서 전체 급여가 5000을 초과하는 각 업무에 대해서 업무와 월급여의 합계를 출력하시오.
--   (업무중에서 CLERK는 제외, 월급여의 합계로 내림차순)
select job,sum(sal) from emp group by job having sum(sal)>5000 and job <>'CLERK' order by sum(sal) desc;
--7. EMP와 DEPT TABLE을 JOIN하여 부서 번호, 부서명, 이름, 급여를 출력하시오.
select emp.deptno,dname,ename,sal from emp,dept where emp.deptno = dept.deptno;
--select deptno,dname,ename,sal from emp inner join dept using(deptno);
--8. 이름이 'ALLEN'인 사원의 부서명을 출력하시오.
select dname from emp,dept where emp.deptno = dept.deptno and ename = 'ALLEN';
--select dname from emp e inner join dept d on e.ename = 'ALLEN' and e.deptno = d.deptno;
--9. EMP Table의 데이터를 출력하되 해당사원에 대한 상관번호와 상관의 성명을 함께 출력하시오.
select A.ename,B.empno,B.ename from emp A,emp B where A.mgr = B.empno;
--select A.ename,B.empno,B.ename from emp A inner join emp B on A.mgr = B.empno;
--10. 10번 부서에 근무하는 사원의 사원번호, 이름, 부서명, 지역, 급여를 급여가 많은 순으로 출력하시오.
select empno,ename,dname,loc,sal from emp,dept where emp.deptno =10 and emp.deptno=dept.deptno order by sal desc;
select empno,ename,dname,loc,sal from emp 
inner join dept on emp.deptno = dept.deptno and emp.deptno =10 order by sal desc;
--11. 사원번호,부서번호,부서명을 출력하세요 단, 사원이 근무하지 않는 부서명도 같이 출력하시오.
select empno,dept.deptno,dname from emp,dept where emp.deptno(+) = dept.deptno;
--select empno,dept.deptno,dname from emp right outer join dept on emp.deptno = dept.deptno;
--12. DEPT Table 에는 존재하는 부서코드이지만 해당부서에 근무하는 사람이 존재하지 않는 경우의 결과를 출력하시오.
select * from dept where deptno not in (select distinct deptno from emp);
select * from dept where deptno not in (select deptno from emp group by deptno having count(*) > 0);
--13. 'ALLEN'의 직무와 같은 사람의 이름, 부서명, 급여, 직무를 출력하시오.
select B.ename,dname,B.sal,B.job from emp A,emp B,dept 
where A.job=B.job and A.ename = 'ALLEN' and A.deptno = dept.deptno and B.ename <> 'ALLEN';
select ename,dname,sal,job from emp,dept 
where emp.deptno = dept.deptno and job = (select job from emp where ename = 'ALLEN') and ename <>'ALLEN';
--14. 'JONES'가 속해있는 부서의 모든 사람의 사원번호, 이름, 입사일자, 급여를 출력하시오.
select B.empno,B.ename,B.hiredate,B.sal from emp A,emp B 
where A.deptno = B.deptno and A.ename = 'JONES' and B.ename <> 'JONES';
select empno,ename,hiredate,sal from emp where deptno = (select deptno from emp where ename = 'JONES');
--15. 전체 사원의 평균 임금보다 많이 받는 사원의 사원번호, 이름, 부서명, 입사일, 지역, 급여를 출력하시오.
select empno,ename,dname,hiredate,loc,sal from emp,dept
where sal > (select avg(sal) from emp) and emp.deptno = dept.deptno order by sal;
select e.empno,e.ename,d.dname,e.hiredate,d.loc,e.sal 
from emp e join dept d on e.deptno = d.deptno and e.sal>(select avg(sal) from emp);
--16. 10번 부서 사람들 중에서 20번 부서의 사원과 같은 업무를 하는 사원의 사원번호, 이름, 부서명, 입사일, 지역을 출력하시오.
select e.empno,e.ename,d.dname,e.hiredate,d.loc from emp e,dept d 
where e.deptno =10 and job in (select job from emp where deptno=20) and e.deptno = d.deptno;
--17. 10번 부서 중에서 30번 부서에는 없는 업무를 하는 사원의 사원번호, 이름, 부서명, 입사일자, 지역을 출력하시오.
select empno,ename,dname,hiredate,loc from emp,dept 
where emp.deptno =10 and job not in (select job from emp where deptno =30) and emp.deptno=dept.deptno;
--18. 'MARTIN'이나 'SCOTT'의 급여와 같은 사원의 사원번호, 이름, 급여를 출력하시오.
select empno,ename,sal from emp where sal in (select sal from emp where ename in('MARTIN','SCOTT'));
--19. 30번 부서의 사원중에서 급여를 가장 많이 받는 사원보다 더 많은 급여를 받는 사원의 이름과 급여를 출력하시오.
select ename,sal from emp where sal > (select max(sal) from emp where deptno =30);
--20. 부서번호가 30번인 사원들의 급여중 최저 급여보다 높은 급여를 받는 사원의 이름, 급여를 출력하시오.
select ename,sal from emp where sal > (select min(sal) from emp where deptno = 30);
select ename,sal from emp where sal > any(select sal from emp where deptno = 30);
--21. 'DALLAS' 에서 근무하는 사원의 이름, 부서번호를 출력하시오.
select ename,dept.deptno from emp,dept where loc = 'DALLAS' and emp.deptno = dept.deptno;
select ename,deptno from emp where deptno = (select deptno from dept where loc = 'DALLAS');
--22. 급여를 3000 이상받는 사원이 소속된 부서와 동일한 부서에서 근무하는 사원들의 이름과 급여, 부서번호를 출력하시오.
select ename,sal,deptno from emp where deptno in (select deptno from emp where sal>=3000);
--23. IN 연산자를 이용하여 부서별로 가장 급여를 많이 받는 사원의 사원번호, 급 여, 부서번호를 출력하시오.
select empno,sal,deptno from emp where sal in(select max(sal) from emp group by deptno);
--24. 30번 부서의 사원중에서 급여를 가장 많이 받는 사원보다 더 많은 급여를 받는 사원의 이름과 급여를 출력하시오.
select ename,sal from emp where sal > (select max(sal) from emp where deptno =30);































