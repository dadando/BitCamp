6장 상속과 인터페이스

상속받은 클래스에 상속받는 생성자가 자동 생성된다.
CheckingAccount(){
    super();   // 부모클래스의 생성자를 호출하는 문장.
}

(본문)
class InheritanceExample1 { 
    public static void main(String args[]) { 
        CheckingAccount obj = new CheckingAccount(); 
        obj.accountNo = "111-22-33333333";     
        obj.ownerName = "홍길동";            
        obj.cardNo = "5555-6666-7777-8888";       
        obj.deposit(100000);      
        try { 
            int paidAmount = obj.pay("5555-6666-7777-8888", 47000);      
            System.out.println("지불액:" + paidAmount); 
            System.out.println("잔액:" + obj.balance); 
        } 
        catch (Exception e) {    
            String msg = e.getMessage(); 
            System.out.println(msg); 
        } 
    } 
} 
(자식클래스)

public class CheckingAccount  extends Account  { 
    String cardNo;      
    
    CheckingAccount(){
    	super();
    }
    
    int pay(String cardNo, int amount) throws Exception {   
        if (!cardNo.equals(this.cardNo) || (balance < amount)) 
	//카드번호가 다르거나 잔액이 금액보다 작을경우
            throw new Exception("지불이 불가능합니다."); 
        return withdraw(amount); 
    } 
} 
(부모클래스)

public class Account { 
    String accountNo; 
    String ownerName; 
    int balance; 
    
    Account(){
    	
    }
    void deposit(int amount) { 
        balance += amount; 
    } 
    int withdraw(int amount) throws Exception { 
        if (balance < amount) 
            throw new Exception("잔액이 부족합니다."); 
        balance -= amount; 
        return amount; 
    } 
} 

#디폴트생성자가 자동으로 생성되는것을 주의해야된다.
(자식클래스)(생성자가 있는 부모클래스를 상속)

public class CheckingAccount extends Account  { 
    String cardNo;      
    
    CheckingAccount(String accountNO,String ownerName,
    		int balance,String cardNO){
    	
    	super(accountNO,ownerName,balance); //이미 정의되있는 파라미터를 호출
    	this.cardNo = cardNO;
    	
    }
    
    int pay(String cardNo, int amount) throws Exception {   
        if (!cardNo.equals(this.cardNo) || (balance < amount)) 
            throw new Exception("지불이 불가능합니다."); 
        return withdraw(amount); 
    } 
} 
(부모클래스)(생성자가있음. 디폴트생성자x)
public class Account { 
    String accountNo; 
    String ownerName; 
    int balance; 
  
    Account(String accountNo,String ownerName,int balance){
    	this.accountNo = accountNo;
    	this.ownerName = ownerName;
    	this.balance = balance;
    }
    void deposit(int amount) { 
        balance += amount; 
    } 
    int withdraw(int amount) throws Exception { 
        if (balance < amount) 
            throw new Exception("잔액이 부족합니다."); 
        balance -= amount; 
        return amount; 
    } 
} 

#메소드 오버라이딩(재정의)
기존의 부모클래스에 있던 메소드를 자식클래스에서 다시 정의한다.
메소드의 이름은 같고 내용을 다르게한다.
호출할때는 부모클래스의 메소드가아닌 오버라이딩된
자식클래스의 메소드가 호출된다.
Ex) 마이너스통장
부모클래스 동일 Account.java
(자식 클래스)

public class CreditLineAccount extends Account{
	int creditLine;
	CreditLineAccount(String accountNo,String ownerName,
			int balance,int creditLine){
		super(accountNo,ownerName,balance);
		this.creditLine = creditLine;
	}
	int withdraw(int amount) throws Exception{
	// 기존 부모클래스의 withdraw메소드를 다시 정의함.(오버라이딩)
		if((balance + creditLine)<amount)
			throw new Exception("인출이 불가능합니다.");
		balance -= amount;
		return amount;
	}

}

(본문)
class InheritanceExample1 { 
    public static void main(String args[]) { 
        CreditLineAccount obj = new CreditLineAccount("000-11-111111",
        		"김선달", 10000, 20000000); 
             
        try { 
            int paidAmount = obj.withdraw(50000);      
            System.out.println("인출액:" + paidAmount); 
            System.out.println("잔액:" + obj.balance); 
            System.out.println("마이너스 한도: "+ obj.creditLine);
        } 
        catch (Exception e) {    
            System.out.println(e.getMessage());
        } 
    } 
} 

#final
클래스앞에 final 키워드가 붙으면 상속을 금지한다.
메소드앞에 final 키워드가 붙으면 오버라이딩을 금지한다.


#abstract
클래스앞에 abstract키워드가 붙으면 해당클래스로 객체생성을할 수 없다.
이를 *추상클래스*라고한다. 
추상클래스에서 메소드앞에 abstract를 반드시 명시해야 된다.
추상클래스 내에 추상메소드는 자식클래스에서 반드시 오버라이딩해야된다.

##추상클래스를 만들어 추상 메소드를 쓰는이유
 오버라이딩을 통해서 메소드의 다형성을 구현해내기 위해서..
(부모클래스)

abstract class MessageSender {
	String title;
	String senderName;
	MessageSender(String title,String senderName){
		this.title = title;
		this.senderName = senderName;
	}
	abstract void sendMessage(String recipient); // 추상 메소드 선언(몸체x)
}
(자식클래스1)

class EMailSender extends MessageSender {
	String senderAddr;
	String emailBody;
	
	EMailSender(String title,String senderName,String senderAddr,String emailBody){
		super(title,senderName);
		this.senderAddr = senderAddr;
		this.emailBody = emailBody;
	}
	void sendMessage(String recipient) {  //오버라이딩
		 System.out.println("------------------------------");        
		 System.out.println("제목: " + title);         
		 System.out.println("보내는 사람: " + senderName +                  
				 " " + senderAddr);         
		 System.out.println("받는 사람: " + recipient);         
		 System.out.println("내용: " + emailBody); 
	}

}
(자식클래스2)

public class SMSSender extends MessageSender {
	 String returnPhoneNo;    
	 String message;    
	 SMSSender(String title, String senderName,           
			 String returnPhoneNo, String message) {     
		 super(title, senderName);        
		 this.returnPhoneNo = returnPhoneNo;       
		 this.message = message;   
	 }    
	 void sendMessage(String recipient) {     //오버라이딩
		 System.out.println("------------------------------");   
		 System.out.println("제목: " + title);      
		 System.out.println("보내는 사람: " + senderName);     
		 System.out.println("전화번호: " + recipient);     
		 System.out.println("회신 전화번호: " + returnPhoneNo);  
		 System.out.println("메시지 내용: " + message);    
	 } 
}
(본문)

public class InheritanceExample {
	 public static void main(String args[]) {     
		 EMailSender obj1 = new EMailSender("생일을 축하합니다", "고객센터",       
				 "admin@dukeeshop.co.kr", "10% 할인쿠폰이 발행되었습니다.");      
		 SMSSender obj2 = new SMSSender("생일을 축하합니다", "고객센터",             
				 "02-000-0000", "10% 할인쿠폰이 발행되었습니다."); 
		 obj1.sendMessage("hatman@yeyeye.com");        
		 obj1.sendMessage("stickman@hahaha.com");   
		 obj2.sendMessage("010-000-0000");  
	 }
}

원객체가 부모클래스인지 자식클래스인지 주의.
캐스트를 통해서 자식클래스가 부모클래스를 받을 수 있다.
ex) Account obj = new CreditLineAccount();    <--가능(부모 = new 자식)
    CreditLineAccount obj2 = new Account();  <--불가능(자식 = new 부모)
   CreditLineAccount obj3 = (CreditLineAccount) obj; <--가능(자식클래스로 캐스팅함)
 
##instanceof  
if(obj instanceof CheckingAccount) {  //obj가 CheckingAccount로 캐스트가되면 true 안되면 false.
      CheckingAccount obj5 = (CheckingAccount)obj;
      System.out.println("카드번호: "+ obj5.cardNo);
}
else if(obj instanceof CreditLineAccount) { 
      CreditLineAccount obj5 = (CreditLineAccount)obj;
      System.out.println("마이너스한도: "+ obj5.creditLine);
}
else if(obj instanceof BonusPointAccount) { 
      BonusPointAccount obj5 = (BonusPointAccount)obj;
      System.out.println("보너스포인트: "+ obj5.bonusPoint);
}
System.out.println();

####인터페이스####
필요한 인터페이스를 상속받아 기능을 정의할 수 있다.
인터페이스 선언: interface 형용사{ }    <---class(x)
인터페이스내부에는 추상메소드만 사용할 수 있다.
인터페이스를 상속받을 때는 extends가 아닌 implements 사용.
abstract가 없어도 자동으로 삽입되서 컴파일된다.
인터페이스에 있는 추상메소드를 오버라이딩을 할때 접근제한자public을 꼭 써야된다.

extends절과 implements절을 같이 쓸때에는 extends절을 먼저 써야된다.

#인터페이스를 구현하는 클래스의 선언
(인터페이스)

interface Lendable {
	abstract void checkOut(String borrower, String date);
	abstract void checkIn();
}
(부모클래스)

public class CDInfo {
	String registerNo;
	String title;
	CDInfo(String registerNo,String title){
		this.registerNo = registerNo;
		this.title = title;
		
	}
}
(인터페이스를 상속)

public class SeparateVolume implements Lendable{
	String requestNo;
	String bookTitle;
	String writer;
	String borrower;
	String checkOutdate;
	byte state;
	SeparateVolume(String requestNo, String bookTitle, String writer){
		this.requestNo = requestNo;
		this.bookTitle = bookTitle;
		this.writer = writer;
	}
	public void checkOut(String borrower, String date) {
		if(state !=0)
			return;
		this.borrower = borrower;
		this.checkOutdate = date;
		this.state = 1;
		System.out.println("*"+bookTitle+"이(가) 대출되었습니다.");
		System.out.println("대출인: "+borrower);
		System.out.println("대출일: "+checkOutdate+"\n");
	}
	public void checkIn() {
		this.borrower = null;
		this.checkOutdate = null;
		this.state = 0;
		System.out.println("*"+bookTitle+"이(가) 반납되었습니다.\n");
	}

}
(부모클래스를 상속받고 인터페이스도 상속받음)

public class AppCDInfo extends CDInfo implements Lendable {

	String borrower;
	String checkOutDate;
	byte state;
	AppCDInfo(String registerNo,String title){
		super(registerNo,title);
	}
	@Override
	public void checkOut(String borrower, String date) {
		// TODO Auto-generated method stub
		if(state !=0)
			return;
		this.borrower = borrower;
		this.checkOutDate = date;
		this.state = 1;
		System.out.println("*"+title+"이(가) 대출되었습니다.");
		System.out.println("대출인: "+borrower);
		System.out.println("대출일: "+date+"\n");
	}

	@Override
	public void checkIn() {
		// TODO Auto-generated method stub
		this.borrower = null;
		this.checkOutDate = null;
		this.state = 0;
		System.out.println("*"+title+"이(가) 반납되었습니다.\n");
	}

}
(본문)

public class InterfaceExample1 {

	public static void main(String[] args) {
		SeparateVolume obj1 = new SeparateVolume("863ㅂ774개","개미","베르베르");
		AppCDInfo obj2 = new AppCDInfo("2005-7001","Redhat Fedora");
		obj1.checkOut("김영숙", "20060315");
		obj2.checkOut("박희경", "20060317");
		obj1.checkIn();
		obj2.checkIn();
	}
}
(클래스 다형성)

public class InterfaceExample1 {

	public static void main(String[] args) {
		SeparateVolume obj1 = new SeparateVolume("863ㅂ774개","개미","베르베르");
		AppCDInfo obj2 = new AppCDInfo("2005-7001","Redhat Fedora");
		out(obj1,"김영숙", "20060315");
		out(obj2,"박희경", "20060317");
		in(obj1);
		in(obj2);
	}
	static void out (Lendable obj,String borrower,String date) {
		obj.checkOut(borrower,date);
	}
	static void in(Lendable obj) {
		obj.checkIn();
	}

}

(인터페이스 변수의 다형성)
public class InterfaceExample2 {

     public static void main(String[] args) {

	Lendable arr[] = new Lendable[3]; 
	        arr[0] = new SeparateVolume("883ㅇ", "푸코의 진자", "에코"); 
	        arr[1] = new SeparateVolume("609.2", "서양미술사", "곰브리치"); 
	        arr[2] = new AppCDInfo("02-17", "XML을 위한 자바 프로그래밍"); 
	        checkOutAll(arr, "윤지혜", "20060315");      
     } 
     static void checkOutAll(Lendable arr[], String borrower, String date) { 
	for (int cnt = 0; cnt < arr.length; cnt++) 
	       arr[cnt].checkOut(borrower, date);      
     }
}

##인터페이스는 추상메소드로 구성되어있다. 
따라서 인터페이스는 객체를 생성할 수는 없지만, 추상메소드로 접근할 수 있는 통로는
만들어줄 수 있다.
#인터페이스를 가지고 할 수 없는일
- *객체 생성*에 사용하는 것은 불가능.
- 클래스에 메소드 로직을 상속해줄 수 없음.
#인터페이스를 가지고 할 수 있는 일
- 클래스의 선언 방법을 제한할 수 있음.
- 인터페이스 *변수 선언*에 사용됨.
































