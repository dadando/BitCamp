##class##
####첫 번째 예제####
(((((Third))))

public class Third {
    public static void main(String[] args) {
        Vehicle porsche918 = new Vehicle();
        porsche918.setColor("Red");
        porsche918.setSpeed(200);
        porsche918.setFuel(11.1f);
        porsche918.setPrice(1050000000.0f);

        System.out.println(porsche918.getColor());
        System.out.println(porsche918.getSpeed());
        System.out.println(porsche918.getFuel());
        System.out.println(porsche918.getPrice());
    }
}

((((Vehicle))))

public class Vehicle {
    // class를 만드는 팁.
    // class 가 어떤것이 되었든 가지고 있는 요소들을 변수처럼 나열하면 된다.
    int speed;    //현재 속도
    String color; // 색상
    float price;  // 가격
    float fuel;   // 배터리 전압, 기름 연료 등등

    // 매소드(C-함수)
    // method - 방법이라는 사전적 의미
    // 특정한 기능을 수행하는 방법이라고 생각하자!
    // 매소드와 요소는 함께 움직인다!

    // 매소드를 만드는 방법
    // public은 무조건 붙인다라고 생각한다.
    // 1) 리턴 타입(자료형)을 적는다.
    // 리턴이란 매소드가 넘겨주는 값(반환값)
    // 2) 매소드의 이름을 적는다.
    // getter, setter 개념이 존재
    // sw아키텍처적으로는 사실 setter는 클래스에 존재하면 안됨.
       /*중요 순서
          1] 우선 프로그램이 돌아가야함
          2] 성능이나 유지보수 관점은 다음임
       */
    // 3) 괄호를 열고 닫는다.
    // 4) 필요하다면 괄호 안에 매소드가 받을 인자를 적는다.
    // *인자란?
    // 리턴의 경우는 매소드가 넘겨주는 것
    // 인자는 매소드가 받는 것
    // 5) 중괄호를 열고 닫는다.
    // 6) 중괄호 안쪽에 매소드가 수행할 기능을 구현한다.
    // 7) 필요하다면 return(리턴)을 수행한다.

    // get 은 넘겨줄때 사용
    // set 은 받을때 사용
    public int getSpeed() {
        return speed;
    }
    // void - 아무것도 없다 라는 뜻.
    // 리턴 타입이 void라는 것은 리턴을 하지 않음을 의미한다.

    // 인자는 변수를 선언하듯이 하면 된다.
    // 단, 인자가 여러개 올 경우
    // 여러개의 변수를 선언하듯이 하면 안되다.
    // 반드시 각각에 자료형을 붙여준다. 예시] (int speed, int num1)

    public void setSpeed(int speed){
        // this 는 자기 자신을 의미
        // 즉 현재 자신이 가지고 있는 speed 를 의미
        // 이름이 같지만 두 개는 서로 다르다.
        this.speed = speed;
    }
    public String getColor(){
        return color;
    }
    public void setColor(String c){
        color = c;
    }
    public float getPrice(){
        return price;
    }
    public void setPrice(float price){
        this.price = price;
    }
    public float getFuel(){
        return fuel;
    }
    public void setFuel(float fuel){
        this.fuel = fuel;
    }

}

##두번째 예제##


public class Third {
    public static void main(String[] args) {
        Person keh = new Person();

        keh.setAge(40);
        keh.setSex("Female");
        keh.setWeight(51.3f);

        // 매번 하나씩 출력하려니 너무 귀찮고 힘듬.
        System.out.println(keh.getAge());
        System.out.println(keh.getSex());
        System.out.println(keh.getWeight());

        // 클래스에서 toString을 사용한것을 부른것.
        System.out.println(keh);
    }
}

((((Person))))
public class Person {
    int age;
    String sex;
    float weight;

    // Alt + Insert 후에 Getter and Setter 엔터 후
    // 항목 선택후 ok하면 자동완성됨.
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public float getWeight() {
        return weight;
    }

    public void setWeight(float weight) {
        this.weight = weight;
    }

    // Alt + Insert후에 toString()클릭 확인
    // sout에 객체를 던져넣으면 알아서 
    // 객체가 가지고 있는 정보들을 출력할 수 있도록 
    // 지원하는 것이 toString()이다.
    // Overide가 붙어있으므로 원한다면 
    // 언제든지 toString을 바꿔서 쓸 수 있다.
    @Override
    public String toString() {
        return "Person{" +
                "age=" + age +
                ", sex='" + sex + '\'' +
                ", weight=" + weight +
                '}';
    }

}

퀴즈)

student를 표현해보세요.
표현방식은 자유롭게.

        // 클래스 변수 선언하는 방법
        // 1) 일반 변수 선언과 동일
        // 2) 클래스 변수에 객체를
        // 할당하는 작업은 약간다름
        // * new를 쓰고 클래스 타입을 적는다.
        //   그리고 괄호를 열고 닫는다.
        //   필요하다면 괄호 안에 인자를 적을 수도 있다.

        // 이것을 객체를 할당한다고 얘기한다.
        // 객체란 무엇인가?
        // 생명체
        // 현재 살아있는 프로그램
        // 정밀한 정의: 메모리상에 올라간 정보


public class Third {
    public static void main(String[] args) {
        Student nana = new Student();

        nana.setcLass(302);
        nana.setGrade(2);
        nana.setName("nana");
        nana.setScore(3.87f);

        Student nano = new Student();

        nano.setScore(3.44f);
        nano.setName("nano");
        nano.setGrade(3);
        nano.setcLass(303);

        System.out.println(nana);
        System.out.println(nano);

    }
}


((((student))))
public class Student {
    int grade;
    int cLass;
    String name;
    float score;

    public int getGrade() {
        return grade;
    }

    public void setGrade(int grade) {
        this.grade = grade;
    }

    public int getcLass() {
        return cLass;
    }

    public void setcLass(int cLass) {
        this.cLass = cLass;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public float getScore() {
        return score;
    }

    public void setScore(float score) {
        this.score = score;
    }

    @Override
    public String toString() {
        return "Student{" +
                "name=" + name +
                ", grade=" + grade +
                ", cLass='" + cLass + '\'' +
                ", score=" + score +
                '}';

    }
}

++++++평균 구할 때+++++
((((Third))))
   
public class Third {
    public static void main(String[] args) {
        Student s1 = new Student();

        //점수 평균 구하기
        float[] scores = {50.4f, 65.2f, 15.3f};
        s1.clacMean(scores);

        System.out.println(s1);


    }
}

((((Student))))

    /* Custom User Method */
    //점수 평균 구할때 사용
    public void calcMean(float[] scores){
        // 배열의 이름에 . 을 붙이고
        // Length 를 쓰면 전체 개수를 얻는다.
        for(int i =0; i < scores.length; i++){
            mean += scores[i];
        }

        mean /= scores.length;
    }

    public float getMean() {
        return mean;
    }

    public void setMean(float mean) {
        this.mean = mean;
    }

    public float[] getScore() {
        return score;
    }

    public void setScore(float[] score) {
        this.score = score;
    }


퀴즈)))
방금 만든 Student 클래스를 활용해보자
이 학급엔 총 3명의 학생이 존재한다.
반 전체의 평균을 구하는 프로그램을 작성하시오.


public class Third {
    public static void main(String[] args) {
        // 클래스 변수 선언하는 방법
        // 1) 일반 변수 선언과 동일
        // 2) 클래스 변수에 객체를
        // 할당하는 작업은 약간다름
        // * new를 쓰고 클래스 타입을 적는다.
        //   그리고 괄호를 열고 닫는다.
        //   필요하다면 괄호 안에 인자를 적을 수도 있다.

        // 이것을 객체를 할당한다고 얘기한다.
        // 객체란 무엇인가?
        // 생명체
        // 현재 살아있는 프로그램
        // 정밀한 정의: 메모리상에 올라간 정보
        Student s1 = new Student();
        Student s2 = new Student();
        Student s3 = new Student();
        Student cLass = new Student();

        //점수 평균 구하기

        float[] scores1 = {50.4f, 65.2f, 15.3f};
        s1.calcMean(scores1);
        float a = s1.getMean();

        float[] scores2 = {40.3f, 40, 16.3f};
        s2.calcMean(scores2);
        float b = s2.getMean();

        float[] scores3 = {30.5f, 75.9f, 90};
        s3.calcMean(scores3);
        float c = s3.getMean();


        System.out.println(s1);
        System.out.println(s2);
        System.out.println(s3);

        System.out.println((a+b+c)/3);
    }
}

####세번째 클래스 배열####

import java.util.Random;

public class Third {
    public static void main(String[] args) {
        final int FIX =3;
        final int START = 0;
        float totMean= 0;

        // 배열 선언 방식과 동일함
        // int[] arr = new int[개수];
        // 이건 배열이라는 공간을 만드는 작업
        Student[] s = new Student[FIX];
        Random rand = new Random();

        // 이중 배열 - 이차원 배열
        // 이중 배열의 생김새는 아래와 같다.
        //    [0]     [1]     [2]
        // ------------------------------
        // ㅣ 60.4 ㅣ 65.2 ㅣ 71.7 ㅣ   [0]
        // ------------------------------
        // ㅣ 12.4 ㅣ 99.2 ㅣ 43.2 ㅣ   [1]
        // ------------------------------
        // ㅣ 90.1 ㅣ 56.3 ㅣ 83.1 ㅣ   [2]
        // ------------------------------
        // 앞쪽의 [] 은 가로(행)을 나타낸다.
        // 뒤쪽의 [] 은 세로(열)을 나타낸다.
        float[][]scores = {
                {60.4f,65.2f,71.7f},
                {12.4f,99.2f,43.2f},
                {90.1f,56.3f,83.1f}
        };

        for(int i = START; i <FIX;i++){
            // 클래스 이름 뒤에 괄호가 열리고 닫히는 것
            // 괄호 열리고 닫히는 부분이 바로 생성자
            s[i] = new Student();
            s[i].setAge(rand.nextInt(10)+20);
            s[i].setMajor("CS");
            s[i].calcMean(scores[i]);
            System.out.println(s[i]);

            totMean += s[i].getMean();

        }
        totMean /= FIX;

        System.out.println("반 전체 평균 = " + totMean);
    }
}


###생성자 예제 ###
((Third))

import java.util.Random;

public class Third {
    public static void main(String[] args) {
        ConsTest ct1 = new ConsTest();
        ConsTest ct2 = new ConsTest(3);
    }
}

((ConsTest))

public class ConsTest {

    public ConsTest(){
        System.out.println("난 기본 생성자야");
    }
    public ConsTest(int num){
        System.out.println("난 int형을 받는 생성자야");
    }
}

###생성자 추가 버전###
(((Third)))
import java.util.Random;

public class Third {
    public static void main(String[] args) {
        final int FIX =3;
        final int START = 0;
        float totMean= 0;

        Student[] s = new Student[FIX];
        Random rand = new Random();

        float[][]scores = {
                {60.4f,65.2f,71.7f},
                {12.4f,99.2f,43.2f},
                {90.1f,56.3f,83.1f}
        };

        for(int i = START; i <FIX;i++){
            //생성자를 사용함으로써 아래의 set 코드들을 전부 밀어버릴 수 있다.
            s[i] = new Student(rand.nextInt(10)+20,"CS");
            //s[i].setAge(rand.nextInt(10)+20);
            //s[i].setMajor("CS");
            s[i].calcMean(scores[i]);
            System.out.println(s[i]);

            totMean += s[i].getMean();

        }
        totMean /= FIX;

        System.out.println("반 전체 평균 = " + totMean);
    }
}

(((Student)))
import java.util.Arrays;

public class Student {
    int age;
    int cLass;
    String name;
    float[] score;
    float mean;
    String major;

    public Student(int age, String major){
        this.age = age;
        this.major = major;
    }


    public String getMajor() {
        return major;
    }

    public void setMajor(String major) {
        this.major = major;
    }

    /* Custom User Method */
    //점수 평균 구할때 사용
    public void calcMean(float[] scores){
        // 배열의 이름에 . 을 붙이고
        // Length 를 쓰면 전체 개수를 얻는다.
        for(int i =0; i < scores.length; i++){
            mean += scores[i];
        }

        mean /= scores.length;
    }

    public float getMean() {
        return mean;
    }

    public void setMean(float mean) {
        this.mean = mean;
    }

    public float[] getScore() {
        return score;
    }

    public void setScore(float[] score) {
        this.score = score;
    }
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getcLass() {
        return cLass;
    }

    public void setcLass(int cLass) {
        this.cLass = cLass;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Student{" +
                "age=" + age +
                ", cLass=" + cLass +
                ", name='" + name + '\'' +
                ", score=" + Arrays.toString(score) +
                ", mean=" + mean +
                ", major='" + major + '\'' +
                '}';
    }
}

(Quiz) -클래스 적용
난수범위 7~33까지를 사용하도록 한다.
사용자로부터 최대 몇 개의 난수를 사용할 것인지 입력 받는다.
이를 기반으로 배열을 생성하고 배열에 난수값들을 할당하도록 한다.
(물론 마지막엔 할당한 난수값을 출력하도록 한다)

((클래스 적용X))
import java.util.Random;
import java.util.Scanner;

public class Third {
    public static void main(String[] args) {
        final int START = 7;
        final int RANGE = 27;
        int num;

        Scanner scan = new Scanner(System.in);
        Random rand = new Random();

        System.out.println("난수를 몇 개 만들까?");
        num=scan.nextInt();

        int[] s = new int[num];

        for(int i = 0; i<num; i++){
            s[i] = rand.nextInt(RANGE)+7;

            System.out.printf("s[%d] = %d\n",i,s[i]);
        }

    }
}


((클래스 적용))

(((((Third))))

public class Third {
    public static void main(String[] args) {
        // 1) 초기값이 필요한 모든 것은 생성자에서 처리
        //    (초기값에 한해 setter 대체)
        // 2) getter는 값을 얻고자 할 때 사용
        //    즉 출력 루틴에 활용할 수 있음
        //    혹은 다른 클래스에 값을 전달해야 할 경우
        // 3) get과 생성자가 하지 못하는 작업들은
        //    모두 Custom Method로 처리해야 한다.

        // 클래스로 코드를 짜는 연습을 하면
        // 1) 재활용성이 높아진다(제일 중요)
        // 2) 가독성이 높아진다
        //    (대충 매소드 이름만으로 동작 파악이 가능)
        RandArrayAlloc raa = new RandArrayAlloc();
        raa.userInput();
        raa.allocRandArr();

        int[] rArr = raa.getrArr();
        
        // length는 컴퓨터에서 자동으로 계산해주는 범위
        // 배열을 사용할때 쓸 수 있다.
        for (int i=0; i<rArr.length; i++){
            System.out.println(rArr[i]);
        }

    }
}

((((RandArrayAlloc))))
import java.util.Random;
import java.util.Scanner;

public class RandArrayAlloc {
    final int START = 7;
    final int RANGE = 27;
    int num;

    Scanner scan;
    Random rand;

    int[] rArr;

    public RandArrayAlloc(){
        scan = new Scanner(System.in);
        rand = new Random();
    }

    public void userInput(){
        System.out.print("생성할 난수 개수 입력: ");
        num = scan.nextInt();
    }

    public void allocRandArr(){
        rArr = new int[num];

        for(int i=0;i<num; i++){
            rArr[i] = rand.nextInt(RANGE) +START;
        }
    }

    public int[] getrArr() {
        return rArr;
    }
}


(Quiz)-클래스 사용
난수의 범위3~10 을 사용하여 난수를 할당하고 여기서 제일 많이 발생한 난수를 찾아서 출력하시오.
(빈도수를 구할 필요는 없음)

import java.util.Random;
import java.util.Scanner;

public class Third {
 
    public static void main(String[] args) {
        final int START = 3;
        final int RANGE = 8;
        // 난수의 범위
        final int NUMSTART = 10;
        final int NUMRANGE = 11;
        // loopNum 의 범위
        int loopNum;

        Random rand = new Random();
        loopNum = rand.nextInt(NUMRANGE) + NUMSTART;

        int[] rArr = new int[RANGE + 1];

        for(int i = 0; i < loopNum; i++) {
            rArr[rand.nextInt(RANGE) + 1]++;
        }

        int key, i, j;

        // 현재 빈도수 정렬만함
        /*
        for(i = 2; i < RANGE + 1; i++) {
            key = rArr[i];

            for(j = i - 1; rArr[j] > key; j--) {
                rArr[j + 1] = rArr[j];
                if(j == 0)
                    break;
            }

            rArr[j + 1] = key;
        }
         */
        int[] idx = new int[RANGE + 1];
        int key2;

        for(i = 1; i < RANGE + 1; i++) {
            idx[i] = i - 1;
        }

        for(i = 2; i < RANGE + 1; i++) {
            key = rArr[i];
            key2 = idx[i];

            for(j = i - 1; rArr[j] > key; j--) {
                rArr[j + 1] = rArr[j];
                idx[j + 1] = idx[j];
                if(j == 0)
                    break;
            }

            rArr[j + 1] = key;
            idx[j + 1] = key2;
        }

        // Sorting Complete
        for(i = 1; i <= RANGE; i++) {
            System.out.print(rArr[i]);
            System.out.println(", " + idx[i]);
        }

        int max = idx[RANGE];
        System.out.println("cur max = " + max);

        System.out.println("max = ");

        for(i = 1; i <= RANGE; i++) {
            if(idx[i] == max) {
                System.out.println(idx[i] + START);
            }
        }
    }
}




연습문제11) - 구글 면접 문제

15층짜리 건물이 있다.
몇층인지 모르겠지만 물건을 잃어버렸다.
물건에 특수한 장치가 내장되어 있어 잃어버린 물건이
자신보다 높은지 낮은지 알수 있다.
가장 무난하게 물건을 찾는 효율적인 방법을 프로그래밍하시오.



연습 문제 12) - 생성자 초급

교수님 class 를 구현해보세요.
((Third))
public class Third {

    public static void main(String[] args) {
       Professor pro = new Professor();

       pro.setAge(60);
       pro.setDegree("Doctor");
       pro.setMajor("Engineering");
       pro.setName("Dr.koo");

        System.out.println(pro.getAge());
        System.out.println(pro.getDegree());
        System.out.println(pro.getMajor());
        System.out.println(pro.getName());

        System.out.println(pro);


    }
}
((Professor))
public class Professor {

    int age;
    String major;
    String degree;
    String name;

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getMajor() {
        return major;
    }

    public void setMajor(String major) {
        this.major = major;
    }

    public String getDegree() {
        return degree;
    }

    public void setDegree(String degree) {
        this.degree = degree;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Professor{" +
                "age=" + age +
                ", major='" + major + '\'' +
                ", degree='" + degree + '\'' +
                ", name='" + name + '\'' +
                '}';
    }
}



연습 문제 13) - 생성자 초급

주사위 클래스를 구현해보세요.

((Third))
import java.util.Random;
import java.util.Scanner;

public class Third {

    public static void main(String[] args) {
       Dice dice = new Dice();
       dice.Dicer();
       dice.DiRa();

       int[] randD=dice.getrandD();

       for(int i =0 ; i<randD.length ; i++){
           System.out.println(randD[i]);
       }



    }
}

((Dice))
import java.util.Random;
import java.util.Scanner;

public class Dice {

    Random rand;
    Scanner scan;

    final int START = 1;
    final int RANGE = 6;

    int num;
    int[] randD;

    public Dice(){
        rand = new Random();
        scan = new Scanner(System.in);
    }
    public void Dicer(){
        System.out.println("주사위 몇번? ");
        num = scan.nextInt();
    }
    public void DiRa(){
        randD = new int[num];

        for (int i =0 ;i<num;i++){
            randD[i] = rand.nextInt(RANGE)+START;
        }
    }

    public int[] getrandD(){
        return randD;
    }

}

연습 문제 14) - 생성자 초급

커피머신 클래스를 구현해보세요.
(아메리카노, 라떼, 에스프레소 ...)

((Third))
import java.util.Random;
import java.util.Scanner;

public class Third {

    public static void main(String[] args) {

        Coffee top = new Coffee();

        top.setCaffeine(2.3f);
        top.setShot(2);
        top.Num();
        top.Select();

        System.out.println(top);


    }
}

((Coffee))

import java.util.Random;
import java.util.Scanner;

public class Coffee {

    int num;
    float shot;
    float caffeine;

    Random rand;
    Scanner scan;
    public Coffee(){
        rand = new Random();
        scan = new Scanner(System.in);
    }
    public void Num(){
        num=scan.nextInt();
    }
    public void Select(){
        if(num<2){
            System.out.println("아메리카노");
        }else if(num<3){
            System.out.println("에스프레소");
        }else if(num<4){
            System.out.println(("카페라떼"));
        }
    }

    public int getNum() {
        return num;
    }

    public void setNum(int num) {
        this.num = num;
    }

    public float getShot() {
        return shot;
    }

    public void setShot(float shot) {
        this.shot = shot;
    }

    public float getCaffeine() {
        return caffeine;
    }

    public void setCaffeine(float caffeine) {
        this.caffeine = caffeine;
    }

    @Override
    public String toString() {
        return "Coffee{" +
                "num=" + num +
                ", shot=" + shot +
                ", caffeine=" + caffeine +
                '}';
    }
}


연습 문제 15) - 생성자 중급

월급 계산기를 구현해보세요.
(시급, 일급, 월급)

import java.util.Scanner;

public class Third {

    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);

        float salary;
        salary = scan.nextInt();

        System.out.println("연봉을 입력하시오.: "+salary +
                "\n월급: "+ salary/12 +"\n일급: " +salary/12/30
                            +"\n시급: "+salary/12/30/8);
    }
}


























