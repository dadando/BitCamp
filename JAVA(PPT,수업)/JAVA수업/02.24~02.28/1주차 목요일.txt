##배열 정리##

int[6] card = {5, 2, 4, 6, 1, 3};
int i, j, key, len = 6;

for(i = 1; i < len; i++){
     key = card[i];
     for(j = i - 1; card[j] > key; j--){
          card[j +1] = card[j];
     }
     card[j + 1] = key;
}

// 1) 1번 for문에서 key는 1번 인덱스를 본다. 
   2) 2번 for문에서 j는 i -1 인 0번 인덱스를 본다.
   3) 둘이 비교해서 0번 인덱스의 값이 key (1번 인덱스) 보다 크면 
       j+1(1번 인덱스)에 j(0번인덱스)의 값을 저장한다.
   4) 2번 for문이 종료되면서 j--를 해서 j는 -1이 된다. 
   5) 그리고나서 j+1(0번 인덱스)에 key값을 저장한다.
   6) 그러면서 1번 for문이 한번 루프를 돌고 i++되서 i가 2가되면서 key는 2번인덱스를 본다. 
   7) 그 이후 반복

import java.util.Random;

public class Five {
    /*
난수의 범위 3 ~ 10 을 사용하여 난수를 할당하고
여기서 제일 많이 발생한 난수를 찾아서 출력하시오.
(빈도수를 구할 필요는 없음)
     */
    public static void main(String[] args) {
        final int START = 3;
        final int RANGE = 8;
        // 난수의 범위
        final int NUMSTART = 10;
        final int NUMRANGE = 11;
        // loopNum 의 범위
        int loopNum;

        Random rand = new Random();
        loopNum = rand.nextInt(NUMRANGE) + NUMSTART;

        int[] rArr = new int[RANGE + 1];

        for(int i = 0; i < loopNum; i++) {
            /*int tmp = rand.nextInt(RANGE) + 1;
            rArr[tmp] = rArr[tmp] + 1;
            위의 코드와 아래의 코드가 같은 의미이다.
            카운트해주는 코드. */
            rArr[rand.nextInt(RANGE) + 1]++;
        }

        int key, i, j;

        int[] idx = new int[RANGE + 1];
        int key2;

        // 커스텀 예외 처리
        for(i = 1; i < RANGE + 1; i++) {
            idx[i] = i - 1;
        }

        // Insertion Sort

        for(i = 2; i < RANGE + 1; i++) {
            key = rArr[i];
            // 빈도수만 오름차순 정렬하면
            // 배열의 인덱스가 정렬되지 않음
            // 이를 방지하기 위해 인덱스를 같이 정렬
            key2 = idx[i];

            // 현재 key 값보다 앞에 있는 값들이
            // 작은지 큰지를 비교하여 크다면 위치를 바꿈
            for(j = i - 1; rArr[j] > key; j--) {
                // 위치 바꾸는 부분
                // key 가 백업되어 있으므로
                // key 의 위치에 넣음
                rArr[j + 1] = rArr[j];
                idx[j + 1] = idx[j];
                // 자바 배열은 음수 인덱스를 허용하지 않음
                // 그래서 j = -1이 되는 상황을 피하기 위해
                // 강제로 j = 0일 때 break 한다.

                // 더 좋은 방법은 더미 노드에 표현할 수 있는
                // 가장 낮은 음수값을 배치하면
                // 아래의 if문을 제거할 수 있음
                if(j == 0)
                    // break 를 하면 루프 하나만 빠져나감
                    // 즉, 루프 두 개가 있으면
                    // 가장 안쪽에 있는 루프만 빠져나가고
                    // 바깥쪽 루프는 빠져나가지 않음
                    break;
            }

            // 백업된 key 를 적절한 위치에 설정
            rArr[j + 1] = key;
            idx[j + 1] = key2;
        }

        // Sorting Complete
        // 정렬이 완료된 부분
        for(i = 0; i <= RANGE; i++) {
            System.out.printf("rArr[%d] = %d", i, rArr[i]);
            System.out.printf(", idx[%d] = %d\n", i, idx[i]);
        }

        int max = rArr[RANGE];
        System.out.println("cur max = " + max);

        System.out.println("max = ");

        for(i = 1; i <= RANGE; i++) {
            if(rArr[i] == max) {
                System.out.println(idx[i] + START);
            }
        }
    }
}

####연습 문제####

1) 1, 3, 4, 7, 11, 18, 29, 47, 76, ... 형태로 숫자가 진행된다.
    23번째 숫자는 무엇일까 ?
    (프로그래밍 하시오)

import java.util.Scanner;

public class Four {
    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);

        int i;
        //int j = scan.nextInt();
        final int MAX = 25;
        int[] arr = new int[MAX];
        arr[1] = 1;
        arr[2] = 3;
        for (; ; ) {
            int j = scan.nextInt();
            for (i = 3; i < arr.length; i++) {
                arr[i] = arr[i - 1] + arr[i - 2];
            }
            System.out.printf("피보나치 수열의 %d번째 수 = %d\n", j, arr[j]);
        }
    }
}

입력: 23
결과: 피보나치 수열의 23번째 수 = 64079


2) 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ... 형태로 숫자가 진행된다.
   1 ~ 57번째까지의 수들로 홀수들의 합을 하고 짝수들의 합을 구한다.
   홀수들의 합 - 짝수들의 합의 결과를 출력하시오.
   (프로그래밍 하시오)

public class Four {
    public static void main(String[] args) {
        int i ;
        final int MAX = 60;
        long[] arr = new long[MAX];
        arr[0] = 1;
        arr[1] = 1;
        long sum1=0;
        long sum2=0;
        for (i=2; i<57; i++){
            arr[i] = arr[i - 1] + arr[i - 2];
        }
        for(i=0; i<57; i++) {

            if(arr[i]%2==1){
                sum1 += arr[i];
            }else if(arr[i]%2==0){
                sum2 += arr[i];
            }

        }
        long sum3= sum1- sum2;
        System.out.println("홀수들의 합: " + sum1);
        System.out.println("짝수들의 합: " + sum2);
        System.out.println("차이: "+ sum3);



    }
}


3) 변수의 정의를 기술하시오.
 :  데이터를 저장할 수 있는 공간.


4) 사람은 이름과 나이를 가지고 있다.
    클래스로 표현해보세요.
((Four))
public class Four {
    public static void main(String[] args) {

        Man man = new Man();
        man.setAge(60);
        man.setName("Tomas");

        System.out.printf("Name: "+ man.getName() + "\nage: " + man.getAge());
    }
}

((Man))
public class Man {
    String name;
    int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }


}

5) 학생은 이름과 나이와 전공을 가지고 있다.
    이를 class 기반으로 표현해보시오.
((Four))
public class Four {
    public static void main(String[] args) {
        Student stu = new Student();

        stu.setName("Mr.Kim");
        stu.setAge(16);
        stu.setMajor("Engineering");

        System.out.println(stu);
        System.out.println(stu.getName());
        System.out.println(stu.getAge());
        System.out.println(stu.getMajor());

    }
}

((Student))
public class Student {
    String name;
    int age;
    String major;

    public String getName(){
        return name;
    }
    public void setName(String name){
        this.name = name;
    }
    public int getAge(){
        return age;
    }
    public void setAge(int age){
        this.age = age;
    }
    public String getMajor(){
        return major;
    }
    public void setMajor(String major){
        this.major = major;
    }

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", major='" + major + '\'' +
                '}';
    }
}



6) 10 부터 1 까지 거꾸로 출력해보시오.

public class Four {
    public static void main(String[] args) {

        int i;

        for(i=10; i>0;i--){
            System.out.println(i);
        }

    }
}


7) 33 ~ 77 까지의 숫자중 3 의 배수를 출력하시오.

public class Four {
    public static void main(String[] args) {

        int i;

        for(i=33; i<78;i++){
            if(i%3==0){
                System.out.println(i);
            }
        }

    }
}



8) 1 ~ 100 까지의 숫자중 사용자 입력을 받아 몇 의 배수를 출력할지 결정하도록 만든다.
    클래스를 사용하여 만들어보세요.

((클래스X))
import java.util.Scanner;

public class Four {
    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);
        int i;
        int num = scan.nextInt();

        for(i=1; i<=100 ; i++){
            if(i%num==0){
                System.out.println(i);
            }
        }

    }
}

((클래스O))
(Four)
import java.util.Scanner;

public class Four {
    public static void main(String[] args) {

        Multiply mult = new Multiply();

        mult.UserInput();
        mult.Baesu();

        System.out.println(mult);
    }
}

(Multiply)
import java.util.Scanner;

public class Multiply {
    Scanner scan;
    int i, num;

    public Multiply() {
        scan = new Scanner(System.in);
    }

    public void UserInput() {

        System.out.println("숫자를 입력하시오.: ");
        num = scan.nextInt();
    }

    public void Baesu() {
        for (i = 1; i <= 100; i++) {

            if (i % num == 0) {
                System.out.println(i);
            }
        }

    }

    public int getnum(){
        return num;
    }


    @Override
    public String toString() {
        return "배수{" +
                 num +
                '}';
    }
}


9) 구구단을 만들어봅시다

2단~9단
각 1~9
for문 2개만들어서
1번 for문이 2~9순차적으로 진행만하고
2번 for문이 1~9하고 곱하기

(((이중 for문)))
public class Four {
    public static void main(String[] args) {
        int i , j,num;

        System.out.println("구구단!!");

        for(i=2; i<=9;i++){
            System.out.println("****"+ i + "단****");

            for(j=1;j<=9;j++){
                num=i*j;
                System.out.println(i + " x " + j + " = " + num);
            }

        }

    }
}


(((스위치 사용))) + 내가 원하는 단을 입력해서 볼 수 있음.
import java.util.Scanner;

public class Second {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int score;


        // 스위치는 각각의 케이스별로 정밀 제어가 가능
        // 장점: 각각의 케이스 제어가 가능하다는 점
        // 단점: 단순 작업일 경우 많아지는 코드량

        // 주의 할점: switch는 break를 하지 않으면 멈추지 않고 계속된다.
        // 그러니 반드시 break를 써야한다.
        for (; ; ) {
            score = scan.nextInt();
            System.out.println("****" + score + "단****");
            for (int i = 1; i <= 9; i++) {
                switch (i) {
                    case 1:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 2:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 3:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 4:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 5:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 6:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 7:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 8:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;
                    case 9:
                        System.out.println(score + " x " + i + " = " + (score * i));
                        break;

                    // default 는 case에서 처리하지 못하는 구간의 값을 입력한 경우에 동작한다.
                    // 숫자를 과도하게 높이거나 혹은 숫자가 아닌 값을 넣으면 오동작을 하는 것을 볼 수 있다.
                    // 이 부분은 Exception(try - catch)부분에서 예외처리 할 수 있다.
                    default:
                        System.out.println("이상한 점수 입력");
                        break;
                }
            }
        }
    }
}

10) 연봉이 2400, 2700, 3000, 3300, 3600 인 사람 5 명이 있다.
     이들의 연봉 인상률은 각각 20%, 15% 10%, 5%, 3% 에 해당한다.
     3 년후 이들의 연봉은 각각 얼마인지 출력해보시오.
((이중 for문))
 
import java.util.Scanner;

public class Four {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        float[] arr1 = {2400, 2700, 3000, 3300, 3600};
        float[] arr2 = {1.2f, 1.15f, 1.1f, 1.05f, 1.03f};
        int i;
        int j;
        final int year = scan.nextInt();

        for (i = 0; i < 5; i++) {
            
            for(j=0;j<year;j++){
                arr1[i] *=arr2[i];
            }

            System.out.println(arr1[i]);

        }


    }
}


((클래스 사용))  
(((Four)))

public class Four {
    public static void main(String[] args) {

        Salary sal = new Salary();
        sal.YearPay();

        System.out.println(sal);


    }
}

(((Salary)))

import java.util.Arrays;
import java.util.Scanner;

public class Salary {

    float[] arr1;
    float[] arr2;
    int year;

    int i,j ;
    Scanner scan;

    public Salary(){
        arr1 = new float[]{2400, 2700, 3000, 3300, 3600};
        arr2 = new float[]{1.2f, 1.15f, 1.1f, 1.05f, 1.03f};

        scan= new Scanner(System.in);
        year= scan.nextInt();
    }
    public void YearPay() {
        for(i = 0; i < 5; i++) {

            for (j = 0; j < year; j++) {
                arr1[i] *= arr2[i];
            }
        }
    }



    @Override
    public String toString() {
        return "Salary{" +
                "arr1=" + Arrays.toString(arr1) +
                '}';
    }
}




####to string을 사용하지 않은 버전####
((((Four))))

public class Four {
    public static void main(String[] args) {

        Salary sal = new Salary();
        sal.YearPay();

        float[] salArr = sal.getArr1();

        for(int i = 0; i < salArr.length; i++) {
            System.out.println(salArr[i]);
        }
    }
}


import java.util.Scanner;

public class Salary {
    float[] arr1;
    float[] arr2;
    int year;

    int i,j ;
    Scanner scan;

    public Salary(){
        arr1 = new float[]{2400, 2700, 3000, 3300, 3600};
        arr2 = new float[]{1.2f, 1.15f, 1.1f, 1.05f, 1.03f};

        scan= new Scanner(System.in);
        year= scan.nextInt();
    }
    public void YearPay() {
        for(i = 0; i < 5; i++) {

            for (j = 0; j < year; j++) {
                arr1[i] *= arr2[i];
            }
        }
    }
    public float[] getArr1(){
        return arr1;
    }

}








#####난이도를 낮춘 도전문제######

DG Challenge 1)

임의의 난수를 컴퓨터가 생성한다.
사용자의 입력을 받아 스무고개 게임을 진행하시오.
입력한 값과 난수의 대소 비교를 진행해서 사용자에게 알려준다.
맞추면 승리, 20 번의 기회를 모두 소비하면 패배!


import java.util.Random;
import java.util.Scanner;

public class Four {
    public static void main(String[] args) {

        Random rand = new Random();
        Scanner scan = new Scanner(System.in);

        final int MAX = 1000;
        int com = rand.nextInt(MAX);

        int i=1;

        while(i<=20){
            int me = scan.nextInt();
            if(com>me){
                System.out.println("컴퓨터의 숫자가 더 큽니다.");
            }else if(com<me){
                System.out.println("컴퓨터의 숫자가 더 작습니다.");
            }else if(com==me){
                System.out.println("정답입니다.");
                System.out.println("승리");
                break;
            }
            i++;
            if(i > 20) {
                System.out.println("패배");
            }
        }

        // while 문 안에 있는 System.out.println(승리/패배); 랑 
        // while 문 밖에 있는거랑 둘 다 상관없음

        //if(i > 20) {
          //  System.out.println("패배");
        //} //else {
            //System.out.println("승리");
        //}
    }
}


DG Challenge 2)

오늘 학습한 Insertion Sort 를 내림차순 하도록 변형해보자!


DG Challenge 3)

20 명 이상의 학생들이 함께 즐길 수 있는 사다리 게임을 구현하자!
학생들의 이름은 A, B, C 등등으로 지어도 무방하다.
















